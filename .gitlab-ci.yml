stages:
  - build
  - test
  - security
  - package
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  DOCKER_IMAGE_NAME: "$CI_REGISTRY_IMAGE/graph-mailer"
  DOCKER_TLS_CERTDIR: "/certs"

cache:
  paths:
    - .m2/repository/

# Build Stage
build:
  stage: build
  image: eclipse-temurin:21-jdk-alpine
  before_script:
    - apk add --no-cache wget
  script:
    - ./mvnw clean compile -B -ntp
  artifacts:
    paths:
      - target/
    expire_in: 1 hour

# Unit Tests
test:unit:
  stage: test
  image: eclipse-temurin:21-jdk-alpine
  script:
    - ./mvnw test -B -ntp
  artifacts:
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
    paths:
      - target/surefire-reports/
      - target/site/jacoco/
    expire_in: 1 week
  coverage: "/Total.*?([0-9]{1,3})%/"

# Integration Tests
test:integration:
  stage: test
  image: eclipse-temurin:21-jdk-alpine
  services:
    - docker:dind
  script:
    - ./mvnw verify -B -ntp -DskipUTs=true
  artifacts:
    reports:
      junit:
        - target/failsafe-reports/TEST-*.xml
    paths:
      - target/failsafe-reports/
    expire_in: 1 week

# OWASP Dependency Check
security:dependency-check:
  stage: security
  image: eclipse-temurin:21-jdk-alpine
  script:
    - ./mvnw org.owasp:dependency-check-maven:check -B -ntp -DfailOnError=false
  artifacts:
    paths:
      - target/dependency-check-report.html
    expire_in: 1 week
  allow_failure: true

# SonarQube Analysis
security:sonar:
  stage: security
  image: eclipse-temurin:21-jdk-alpine
  script:
    - |
      if [ -n "$SONAR_HOST_URL" ] && [ -n "$SONAR_TOKEN" ]; then
        ./mvnw sonar:sonar \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.login="$SONAR_TOKEN" \
          -Dsonar.projectKey="graph-mailer" \
          -Dsonar.projectName="Graph Mailer" \
          -B -ntp
      else
        echo "SonarQube configuration not found, skipping analysis"
      fi
  allow_failure: true
  only:
    - main
    - develop

# Package Application
package:jar:
  stage: package
  image: eclipse-temurin:21-jdk-alpine
  script:
    - ./mvnw package -DskipTests -B -ntp
  artifacts:
    paths:
      - target/graph-mailer-*.jar
    expire_in: 1 week

# Build Docker Image
package:docker:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA .
    - docker tag $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA $DOCKER_IMAGE_NAME:latest
    - docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $DOCKER_IMAGE_NAME:latest
    # Tag and push semantic version if this is a tag
    - |
      if [[ $CI_COMMIT_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        docker tag $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
        docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
      fi
  only:
    - main
    - tags

# Deploy to Development
deploy:dev:
  stage: deploy
  image: alpine/k8s:latest
  environment:
    name: development
    url: https://graph-mailer-dev.example.com
  script:
    - echo "Deploying to development environment..."
    - |
      # Update deployment image tag
      kubectl set image deployment/graph-mailer \
        graph-mailer=$DOCKER_IMAGE_NAME:$CI_COMMIT_SHA \
        -n graph-mailer-dev

      # Wait for rollout to complete
      kubectl rollout status deployment/graph-mailer -n graph-mailer-dev --timeout=300s

      # Verify deployment
      kubectl get pods -n graph-mailer-dev -l app=graph-mailer
  only:
    - main

# Deploy to Production
deploy:prod:
  stage: deploy
  image: alpine/k8s:latest
  environment:
    name: production
    url: https://graph-mailer.example.com
  script:
    - echo "Deploying to production environment..."
    - |
      # Update deployment image tag
      kubectl set image deployment/graph-mailer \
        graph-mailer=$DOCKER_IMAGE_NAME:$CI_COMMIT_TAG \
        -n graph-mailer-prod

      # Wait for rollout to complete
      kubectl rollout status deployment/graph-mailer -n graph-mailer-prod --timeout=300s

      # Verify deployment
      kubectl get pods -n graph-mailer-prod -l app=graph-mailer
  when: manual
  only:
    - tags

# Clean up old images
cleanup:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Cleaning up old Docker images..."
    - docker system prune -f
  when: manual
  allow_failure: true
